{"version":3,"sources":["containers/game-player/actions.js","constants/food.js","components/grid-cell/index.js","components/grid/index.js","constants/directions.js","components/button-svg/index.js","containers/game-controls/index.js","containers/game-controls/actions.js","components/score-board/index.js","components/score-board/actions.js","components/footer/index.js","containers/game-player/index.js","App.js","containers/game-player/initialStates.js","config/game.js","containers/game-player/helpers/utils.js","containers/game-player/helpers/game-timer.js","containers/game-player/helpers/game-helpers.js","containers/game-player/reducer.js","config/store.js","index.js"],"names":["setupNewGame","type","foodColors","RED","colorName","PINK","YELLOW","GREEN","DEFAULT","foodList","APPLE","name","points","color","STRAWBERRY","BANANA","FROG","foodListArray","GridCell","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","cellClasses","props","hasSnake","push","snakeColor","isSnakeHead","concat","nextSnakeDirection","hasFood","foodInfo","classNames","join","react_default","a","createElement","className","Component","connect","state","ownProps","cellById","cellId","Grid","_this","gridStyle","gridTemplateColumns","width","gridTemplateRows","height","style","cells","j","i","grid_cell","grid","gridCanvas","directions","ButtonSVG","onClick","startGame","viewBox","xmlns","config","fill","d","mask","id","x","y","xCordinates","buttonText","GameControls","call","bind","assertThisInitialized","pauseGame","setUpNewGame","handleKeyDown","e","direction","console","log","keyCode","preventDefault","updateDirection","document","addEventListener","removeEventListener","running","paused","button_svg","dead","class","gameState","ScoreBoard","gState","error","scoreBoard","level","score","disabled","Footer","href","target","rel","GamePlayer","score_board","components_grid","game_controls","footer","App","game_player","initialGameState","initialScoreBoard","initialGameControls","initialGridCanvas","initialCellById","initialCell","initialSnakeInfo","head","tail","length","speed","gridSize","snake","speedLevels","1","minScore","2","3","4","rand","min","max","Math","ceil","floor","random","getNextNumberInRange","number","difference","Error","gameTimer","GameTimer","dispatch","timeout","clearTimeout","setTimeout","snakeInfo","createNewGridWithRandomSnake","cellsById","nextSnakeCell","randomCell","gridInfo","createNewFood","getState","_getState","_getState$gridCanvas","emptyCells","cell","randomFood","processStep","moveOneStep","nextStep","nextSnakeHead","getNextHead","gameControls","nextHeadCellInfo","markSnakeDead","newSnakeInfo","payload","currentTailCell","newScore","changeGameLevel","cellReducer","undefined","action","objectSpread","rootReducer","combineReducers","loop","Cmd","list","run","successActionCreator","data","failActionCreator","args","cellWithFood","errorInfo","defineProperty","enhancers","composeWithDevTools","composeEnhancers","install","store","createStore","ReactDOM","render","es","src_App","getElementById"],"mappings":"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","file":"static/js/main.7bf10842.chunk.js","sourcesContent":["export const SETUP_NEW_GAME = 'setup-new-game';\nexport const SETUP_NEW_SCORE_BOARD = 'setup-new-score-board';\nexport const RESET_GAME = 'reset-game';\nexport const SETUP_GRID = 'setup-grid';\nexport const GAME_ERROR = 'game-error';\nexport const SETUP_CELLS_BY_ID = 'setup-cells-by-id';\nexport const UPDATE_SNAKE = 'update-snake';\nexport const CREATE_NEW_FOOD = 'create-new-food';\nexport const PLACE_FOOD = 'place-food';\nexport const STEP = 'step';\nexport const ADD_NEW_HEAD = 'add-new-head';\nexport const UPDATE_CURRENT_HEAD = 'update-current-head';\nexport const REMOVE_CURRENT_TAIL = 'remove-current-tail';\nexport const UPDATE_SCORE = 'update-score';\nexport const DEAD_GAME = 'dead-game';\nexport const UPDATE_LEVEL = 'update-level';\n\nexport const setupNewGame = () => ({\n    type: SETUP_NEW_GAME // this will setup game state, then score board, then grid and all cells, and then place random snake in it.\n});\n","export const foodColors = {\n    RED: {\n        colorName: 'snake-color-red'\n    },\n    PINK: {\n        colorName: 'snake-color-pink'\n    },\n    YELLOW: {\n        colorName: 'snake-color-yellow'\n    },\n    GREEN: {\n        colorName: 'snake-color-green'\n    },\n    DEFAULT: {\n        colorName: 'snake-color-grey'\n    }\n}\n\nexport const foodList = {\n    APPLE: {\n        name: 'apple',\n        points: 15,\n        color: foodColors.RED,\n    },\n    STRAWBERRY: {\n        name: 'strawberry',\n        points: 10,\n        color: foodColors.PINK\n    },\n    BANANA: {\n        name: 'banana',\n        points: 5,\n        color: foodColors.YELLOW\n    },\n    FROG: {\n        name: 'frog',\n        points: 20,\n        color: foodColors.GREEN\n    }\n}\n\n\nexport const foodListArray = [foodList.APPLE, foodList.STRAWBERRY, foodList.BANANA, foodList.FROG]","import './style.css';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { foodColors } from '../../constants/food';\n\n\nexport class GridCell extends Component {\n    render() {\n        const cellClasses = ['grid-cell'];\n\n        if (this.props.hasSnake) {\n            cellClasses.push(this.props.snakeColor || foodColors.DEFAULT.colorName);\n            if (this.props.isSnakeHead) {\n                cellClasses.push('snake-head');\n            } else {\n                cellClasses.push(`snake-body snake-${this.props.nextSnakeDirection}`);\n            }\n        }\n\n        if (this.props.hasFood) {\n            cellClasses.push(`food-name-${this.props.foodInfo.name}`);\n        }\n        \n        const classNames = cellClasses.join(' ');\n        \n        return (\n            <div key={this.props.key} className={classNames}>\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    (state, ownProps) => state.cellById[ownProps.cellId] || {}, // map state to props\n)(GridCell);","import './style.css';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport GridCell from '../grid-cell';\n\n\nexport class Grid extends Component {\n    render() {\n        const gridStyle = {\n            gridTemplateColumns: `repeat(${this.props.width}, minmax(0, 1fr))`,\n            gridTemplateRows: `repeat(${this.props.height}, minmax(0, 1fr))`,\n        }\n        return (\n            <div className=\"grid\" style={gridStyle}>\n                {\n                    ((width, height) => {\n                        const cells = [];\n                        for(let j=0; j < height; j++) {\n                            for(let i=0; i < width; i++) {\n                                cells.push(<GridCell key={this.props.grid[i][j]} cellId={this.props.grid[i][j]}/>)\n                            }\n                        }\n                        return cells;\n                    })(this.props.width, this.props.height)\n                }\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    (state) => state.gridCanvas, // map state to props\n)(Grid);\n","export const directions = {\n    UP: 'up',\n    DOWN: 'down',\n    LEFT: 'left',\n    RIGHT: 'right'\n}","import './style.css';\nimport React, { Component } from 'react';\n\nexport class ButtonSVG extends Component {\n    render() {\n        return (\n            <div className=\"button-svg\">\n                <svg onClick={this.props.startGame} viewBox=\"45 60 400 320\" xmlns=\"http://www.w3.org/2000/svg\" style={{\n                    width: `${this.props.config.width}`\n                }}>\n                    <path fill=\"#fff\" d=\"M 90 210 C 90 180 90 150 90 150 C 150 150 180 150 180 150 C 180 150 300 150 300 150 C 300 150 330 150 390 150 C 390 150 390 180 390 210 C 390 240 390 270 390 270 C 330 270 300 270 300 270 C 300 270 180 270 180 270 C 180 270 150 270 90 270 C 90 270 90 240 90 210\" mask=\"url(#knockout-text)\" >\n                    </path>\n                    <mask id=\"knockout-text\">\n                    <rect width=\"100%\" height=\"100%\" fill=\"#fff\" x=\"0\" y=\"0\" />\n                    <text x={this.props.config.xCordinates} y=\"227\" fill=\"#000\">{this.props.buttonText}</text>\n                    </mask>\n                </svg>\n            </div>\n        )\n    }\n}\n\nexport default ButtonSVG;","import './style.css';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { startGame, updateDirection } from './actions';\nimport { setupNewGame } from '../game-player/actions';\nimport { directions } from '../../constants/directions';\nimport ButtonSVG from '../../components/button-svg';\n\nexport class GameControls extends Component {\n    constructor(props) {\n        super(props);\n        this.startGame = this.startGame.bind(this);\n        this.pauseGame = this.pauseGame.bind(this);\n        this.setUpNewGame = this.setUpNewGame.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n    }\n\n    handleKeyDown(e) {\n        console.log('handle key down called')\n        let direction;\n        switch(e.keyCode) {\n            case 39:\n            case 68:\n                direction = directions.RIGHT;\n                break;\n            case 38:\n            case 87:\n                direction = directions.UP;\n                break;\n            case 37:\n            case 65:\n                direction = directions.LEFT;\n                break;\n            case 40:\n            case 83:\n                direction = directions.DOWN;\n                break;\n            default:\n        }\n\n        if(direction) {\n            e.preventDefault();\n            this.props.updateDirection(direction);\n        }\n    }\n\n    startGame() {\n        document.addEventListener(\"keydown\", this.handleKeyDown);\n        this.props.startGame();\n    }\n\n    pauseGame() {\n        document.removeEventListener(\"keydown\", this.handleKeyDown);\n        this.props.pauseGame();\n    }\n\n    setUpNewGame() {\n        document.removeEventListener(\"keydown\", this.handleKeyDown);\n        this.props.setupNewGame();\n    }\n\n    render() {\n        if (!this.props.running) {\n            return (\n                <div className=\"canvas-overlay\">\n                    <ButtonSVG startGame={this.startGame} buttonText={'Start Game'} config={{\n                        width: '300px',\n                        xCordinates: '141'\n                    }}/>\n                </div>\n            )\n        } else if (this.props.running && this.props.paused) {\n            return (\n                <div className=\"canvas-overlay\">\n                    <ButtonSVG startGame={this.startGame} buttonText={'Resume Game'} config={{\n                        width: '300px',\n                        xCordinates: '125'\n                    }}/>\n                </div>\n            )\n        } else if (this.props.running && this.props.dead) {\n            return (\n                <div className=\"canvas-overlay\">\n                    <div class=\"dead-text\">You are dead !</div>\n                    <ButtonSVG startGame={this.setUpNewGame} buttonText={'Ok'} config={{\n                        width: '200px',\n                        xCordinates: '210'\n                    }}/>\n                </div>\n            )\n        } else {\n            return null;\n        }\n    }\n}\n\nexport default connect(\n    (state) => state.gameState,\n    { startGame, updateDirection, setupNewGame }\n)(GameControls);","export const START_GAME = 'start-game';\nexport const UPDATE_DIRECTION = 'update-direction';\n\nexport const startGame = () => ({\n    type: START_GAME,\n});\n\nexport const updateDirection = (direction) => {\n    return ({\n        type: UPDATE_DIRECTION,\n        direction,\n    });\n}","import './style.css';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { pauseGame } from './actions';\n\n\nexport class ScoreBoard extends Component {\n    render() {\n        const gState = this.props.gameState;\n        return (\n            <div className=\"score-board-wrapper\">\n                <div className={(gState.running && !(gState.paused || gState.dead || gState.error)) ? 'score-board white': 'score-board default'}>\n                    <div className=\"game-level\">\n                        <label>Level</label>\n                        <span>{this.props.scoreBoard.level}</span>\n                    </div>\n                    <div className=\"game-score\">\n                        <label>Score</label>\n                        <span>{this.props.scoreBoard.score}</span>\n                    </div>\n                    <div className=\"score-board-actions\">\n                        <div className=\"pause-button\">\n                            <button onClick={this.props.pauseGame} disabled={!gState.running || (gState.paused || gState.dead || gState.error)} >Pause Game</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    (state) => ({\n        scoreBoard: state.scoreBoard,\n        gameState: state.gameState\n    }),\n    { pauseGame }\n)(ScoreBoard);","export const PAUSE_GAME = 'pause-game';\n\nexport const pauseGame = () => ({\n    type: PAUSE_GAME,\n});","import './style.css';\nimport React, { Component } from 'react';\n\n\nexport class Footer extends Component {\n    render() {\n        return (\n            <div className=\"footer\">\n                Snake Game by <a href=\"https://www.jaspreet-singh.com\" target=\"_blank\" rel=\"noopener noreferrer\">Jaspreet Singh</a>. Hosted with <i className=\"icon ion-heart\"></i> by <a href=\"https://github.com/jaspreet57/snake-game\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a>\n            </div>\n        )\n    }\n}\n\nexport default Footer;","import './style.css';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setupNewGame } from './actions';\nimport Grid from '../../components/grid';\nimport GameControls from '../game-controls';\nimport ScoreBoard from '../../components/score-board';\nimport Footer from '../../components/footer';\n\n\nexport class GamePlayer extends Component {\n    componentDidMount() {\n        this.props.setupNewGame();\n    }\n\n    render() {\n        return (\n            <section className=\"game-player\">\n                <div className=\"grid-canvas-wrapper\">\n                    <ScoreBoard />\n                    <div className=\"grid-canvas\">\n                        <Grid />\n                        <GameControls />\n                    </div>\n                    <Footer />\n                </div>\n            </section>\n        )\n    }\n}\n\nexport default connect(\n    null, // no state mapped\n    { setupNewGame } // bind action creators\n)(GamePlayer);","import React from 'react';\nimport GamePlayer from './containers/game-player';\n\nfunction App() {\n  return <GamePlayer />\n}\n\nexport default App;\n","import { foodColors } from '../../constants/food';\nimport { directions } from '../../constants/directions';\n\nexport const initialGameState = {\n    running: false,\n    paused: false,\n    dead: false,\n    error: false\n}\n\nexport const initialScoreBoard = {\n    level: 1,\n    score: 0\n}\n\nexport const initialGameControls = {\n    direction: directions.RIGHT, // default direction\n}\n\nexport const initialGridCanvas = {\n    grid: [], // new Array(width).fill(new Array(height).fill(cell_ids))\n    height: 0,\n    width: 0\n};\n\nexport const initialCellById = {\n    // [id]: cellInfo\n}\n\nexport const initialCell = {\n    /**\n     * hasSnake: false,\n     * nextSnakeCell: {x: 2, y: 1},   // if it hasSnake\n     * nextSnakeDirection: null // example 'right', 'left', 'up', 'down'\n     * isSnakeHead: false,\n     * snakeColor: foodColors.DEFAULT\n     * hasFood: false,\n     * foodInfo: null || food.foodList.APPLE, etc,\n     */\n}\n\nexport const initialSnakeInfo = {\n    head: null, // head: {x: 3, x: 4}\n    tail: null, // tail: {x: 1, y: 4}\n    length: 0,\n    speed: 1000, // 1 sec\n    color: foodColors.DEFAULT\n}","export const gridSize = {\n    width: 20,\n    height: 20\n}\n\nexport const snake = {\n    startSpeed: 500 // .5 sec,\n}\n\nexport const speedLevels = {\n    1: {\n        minScore: 0,\n        speed: 500\n    },\n    2: {\n        minScore: 500,\n        speed: 300\n    },\n    3: {\n        minScore: 1000,\n        speed: 250,\n    },\n    4: {\n        minScore: 2000,\n        speed: 200\n    }\n}","/**\n * \n * @param { number } min \n * @param { number } max\n * @description 'Create Random number between min and max, with min inclusively\n */\nexport function rand(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\n/**\n * \n * @param { number } max \n * @param { number } number \n * @param { number } difference\n * @description 'Get number + difference within range like 0 - 1 will be max number and not -1 \n */\nexport function getNextNumberInRange(max, number, difference) {\n    if (number > max - 1 || number < 0) {\n        throw new Error('NexNumberInRange: Invalid number !');\n    }\n    if(difference > -1) {\n        return (number + difference) % max;\n    }\n    return (number + difference + max) % max;\n}","import { STEP } from '../actions';\n\nexport class GameTimer {\n    timeout;\n\n    nextStep(dispatch, state) {\n        this.timeout && clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => dispatch({\n            type: STEP\n        }), state.snakeInfo.speed);\n    }\n}","import { foodColors, foodListArray } from '../../../constants/food';\nimport { directions } from '../../../constants/directions';\nimport { snake, speedLevels } from '../../../config/game';\nimport { rand, getNextNumberInRange } from './utils';\nimport { UPDATE_SNAKE, CREATE_NEW_FOOD, ADD_NEW_HEAD, UPDATE_CURRENT_HEAD, REMOVE_CURRENT_TAIL, UPDATE_SCORE, DEAD_GAME, UPDATE_LEVEL } from '../actions';\nimport { GameTimer } from './game-timer';\n\nconst gameTimer = new GameTimer();\n\nexport const createNewGridWithRandomSnake = (width, height) => {\n    const grid = [];\n    const cellsById = {};\n\n    for (let i = 0; i < width; i++) {\n        grid.push([]);\n        for (let j = 0; j < height; j++) {\n            const id = `cell_${i}_${j}`;\n            cellsById[id] = {\n                hasSnake: false,\n                nextSnakeCell: null,   // if it hasSnake and is not head of snake\n                nextSnakeDirection: null,\n                isSnakeHead: null,\n                snakeColor: null,\n                hasFood: false,\n                foodInfo: null,\n                id\n            };\n            grid[i].push(id);\n        }\n    }\n\n    // place snake head randomly\n    const randomCell = {\n        x: rand(0, width),\n        y: rand(0, height)\n    }\n    const snakeInfo = {\n        head: randomCell,\n        tail: randomCell,\n        length: 1,\n        speed: snake.startSpeed,\n        color: foodColors.DEFAULT.colorName\n    }\n\n    // update cell data also for snake\n    cellsById[grid[randomCell.x][randomCell.y]] = {\n        id: grid[randomCell.x][randomCell.y],\n        hasSnake: true,\n        nextSnakeCell: null,   // if it hasSnake and is not head of snake or length of snake is not 1\n        nextSnakeDirection: null,\n        isSnakeHead: true,\n        snakeColor: foodColors.DEFAULT.colorName,\n        hasFood: false,\n        foodInfo: null\n    }\n\n    return {\n        gridInfo: {\n            grid,\n            width,\n            height\n        },\n        cellsById,\n        snakeInfo\n    }\n};\n\n\nexport const createNewFood = (getState) => {\n    const { gridCanvas: { grid, width, height }, cellById } = getState();\n\n    const emptyCells = [];\n    for (let i = 0; i < width; i++) {\n        for (let j = 0; j < height; j++) {\n            const cell = cellById[grid[i][j]];\n\n            if (!cell.hasSnake && !cell.hasFood) { // cells that has no food and no snake\n                emptyCells.push(cell);\n            }\n        }\n    }\n\n    const randomCell = emptyCells[rand(0, emptyCells.length)];\n    const randomFood = foodListArray[rand(0, foodListArray.length)];\n\n    return {\n        id: randomCell.id,\n        hasFood: true,\n        foodInfo: randomFood\n    };\n};\n\nexport const getNextHead = (direction, head, width, height) => {\n    switch (direction) {\n        case directions.UP:\n            return {\n                x: head.x,\n                y: getNextNumberInRange(height, head.y, -1)\n            };\n        case directions.RIGHT:\n            return {\n                x: getNextNumberInRange(width, head.x, 1),\n                y: head.y\n            };\n        case directions.DOWN:\n            return {\n                x: head.x,\n                y: getNextNumberInRange(height, head.y, 1)\n            };\n        case directions.LEFT:\n            return {\n                x: getNextNumberInRange(width, head.x, -1),\n                y: head.y\n            };\n        default:\n            return head;\n    }\n};\n\nexport const markSnakeDead = (dispatch) => {\n    dispatch({\n        type: DEAD_GAME\n    })\n}\n\nexport const changeGameLevel = (dispatch, score, level) => {\n    if(speedLevels[level+1] && score > speedLevels[level+1].minScore) {\n        dispatch({\n            type: UPDATE_LEVEL,\n            payload: {\n                level: level+1\n            }\n        });\n        dispatch({\n            type: UPDATE_SNAKE,\n            payload: {\n                speed: speedLevels[level+1].speed\n            }\n        });\n    }\n}\n\nexport const processStep = (getState, dispatch) => {\n    const state = getState();\n    const continueTimer = moveOneStep(state, dispatch);\n    continueTimer && gameTimer.nextStep(dispatch, state);\n}\n\nexport const processOneStepOnly = (getState, dispatch) => {\n    const state = getState();\n    moveOneStep(state, dispatch);\n}\n\nexport const moveOneStep = (state, dispatch) => {\n    if (state.gameState.running && !(state.gameState.paused || state.gameState.error || state.gameState.dead)) {\n        const nextSnakeHead = getNextHead(\n            state.gameControls.direction,\n            state.snakeInfo.head,\n            state.gridCanvas.width,\n            state.gridCanvas.height\n        );\n\n        const nextHeadCellInfo = state.cellById[state.gridCanvas.grid[nextSnakeHead.x][nextSnakeHead.y]];\n        if (nextHeadCellInfo.hasSnake) {\n            if ((state.snakeInfo.length === 2) || !((state.snakeInfo.tail.x === nextSnakeHead.x) && (state.snakeInfo.tail.y === nextSnakeHead.y))) {\n                return markSnakeDead(dispatch);\n            }\n        }\n\n        const newSnakeInfo = {\n            head: nextSnakeHead,\n            color: (nextHeadCellInfo.hasFood && nextHeadCellInfo.foodInfo.color.colorName) || state.snakeInfo.color,\n            length: (nextHeadCellInfo.hasFood && (state.snakeInfo.length + 1)) || state.snakeInfo.length,\n        }\n\n        // headMove()\n        // add new head\n        dispatch({\n            type: ADD_NEW_HEAD,\n            payload: {\n                id: nextHeadCellInfo.id,\n                hasSnake: true,\n                nextSnakeCell: null,\n                nextSnakeDirection: null,\n                isSnakeHead: true,\n                snakeColor: newSnakeInfo.color,\n                hasFood: false,\n                foodInfo: null\n            }\n        });\n        // update old head cell\n        const currentHeadCell = state.cellById[state.gridCanvas.grid[state.snakeInfo.head.x][state.snakeInfo.head.y]];\n        dispatch({\n            type: UPDATE_CURRENT_HEAD,\n            payload: {\n                id: currentHeadCell.id,\n                nextSnakeCell: nextSnakeHead,\n                isSnakeHead: false,\n                nextSnakeDirection: state.gameControls.direction\n            }\n        });\n\n\n        // tailMove()\n        if (!nextHeadCellInfo.hasFood) {\n            // remove current tail\n            const currentTailCell = state.cellById[state.gridCanvas.grid[state.snakeInfo.tail.x][state.snakeInfo.tail.y]];\n            dispatch({\n                type: REMOVE_CURRENT_TAIL,\n                payload: {\n                    id: currentTailCell.id,\n                    nextSnakeCell: null,\n                    nextSnakeDirection: null,\n                    isSnakeHead: null,\n                    hasSnake: false,\n                    snakeColor: null,\n                    hasFood: false,\n                    foodInfo: null\n                }\n            });\n            // update snake info with new tail\n            newSnakeInfo.tail = currentTailCell.nextSnakeCell || nextSnakeHead; // for snake length 1 tail will be equal to newSnakeHead\n        }\n\n        dispatch({ type: UPDATE_SNAKE, payload: newSnakeInfo });\n\n        if (nextHeadCellInfo.hasFood) {\n            const newScore = state.scoreBoard.score + nextHeadCellInfo.foodInfo.points;\n            dispatch({\n                type: UPDATE_SCORE,\n                payload: {\n                    score: newScore\n                }\n            })\n            changeGameLevel(dispatch, newScore, state.scoreBoard.level);\n            dispatch({\n                type: CREATE_NEW_FOOD\n            });\n        }\n        return true;\n    } else {\n        return false;\n    }\n}","import { loop, Cmd } from 'redux-loop';\nimport {\n    SETUP_NEW_GAME,\n    SETUP_NEW_SCORE_BOARD,\n    RESET_GAME,\n    SETUP_GRID,\n    GAME_ERROR,\n    UPDATE_SNAKE,\n    SETUP_CELLS_BY_ID,\n    CREATE_NEW_FOOD,\n    PLACE_FOOD,\n    STEP,\n    ADD_NEW_HEAD,\n    UPDATE_CURRENT_HEAD,\n    REMOVE_CURRENT_TAIL,\n    UPDATE_SCORE,\n    DEAD_GAME,\n    UPDATE_LEVEL\n} from './actions';\nimport {\n    START_GAME,\n    UPDATE_DIRECTION,\n} from '../game-controls/actions';\nimport {\n    PAUSE_GAME\n} from '../../components/score-board/actions';\nimport { initialCell, initialCellById, initialGameState, initialGridCanvas, initialScoreBoard, initialSnakeInfo, initialGameControls } from './initialStates';\nimport { createNewGridWithRandomSnake, createNewFood, processStep } from './helpers/game-helpers';\nimport { gridSize } from '../../config/game';\nimport { directions } from '../../constants/directions';\n\nexport const gameStateReducer = (state = initialGameState, action) => {\n    switch (action.type) {\n        case SETUP_NEW_GAME:\n            return loop(\n                state,\n                Cmd.list([\n                    Cmd.action({ type: RESET_GAME }),\n                    Cmd.action({ type: SETUP_NEW_SCORE_BOARD }),\n                    Cmd.action({ type: UPDATE_DIRECTION, direction: directions.RIGHT}),\n                    Cmd.run(createNewGridWithRandomSnake, {\n                        successActionCreator: (data) => ({\n                            type: SETUP_GRID,\n                            payload: data\n                        }),\n                        failActionCreator: (error) => ({\n                            type: GAME_ERROR,\n                            error: error\n                        }),\n                        args: [gridSize.width, gridSize.height]\n                    }),\n                ])\n            );\n        case CREATE_NEW_FOOD:\n            return loop(\n                state,\n                Cmd.run(createNewFood, {\n                    successActionCreator: (cellWithFood) => ({\n                        type: PLACE_FOOD,\n                        payload: cellWithFood\n                    }),\n                    failActionCreator: (error) => ({\n                        type: GAME_ERROR,\n                        error: error\n                    }),\n                    args: [Cmd.getState]\n                })\n            );\n        case GAME_ERROR:\n            console.log('Error occured', action.error);\n            return {\n                ...state,\n                error: true,\n                errorInfo: action.error\n            }\n        case RESET_GAME:\n            return {\n                ...state,\n                running: false,\n                paused: false,\n                dead: false,\n                error: false,\n            }\n        case DEAD_GAME:\n            return {\n                ...state,\n                dead: true,\n            }\n        case START_GAME:\n            return loop(\n                {\n                    ...state,\n                    running: true,\n                    paused: false,\n                    dead: false,\n                    error: false,\n                },\n                Cmd.action({ type: STEP })\n            );\n        case PAUSE_GAME:\n            return {\n                ...state,\n                paused: true,\n            }\n        case STEP:\n            return loop(\n                state,\n                Cmd.run(processStep, {\n                    failActionCreator: (error) => ({\n                        type: GAME_ERROR,\n                        error: error\n                    }),\n                    args: [Cmd.getState, Cmd.dispatch]\n                })\n            );\n        default:\n            return state;\n    }\n}\n\nexport const scoreBoardReducer = (state = initialScoreBoard, action) => {\n    switch (action.type) {\n        case SETUP_NEW_SCORE_BOARD:\n            return {\n                ...state,\n                level: 1,\n                score: 0\n            }\n        case UPDATE_SCORE:\n            return {\n                ...state,\n                score: action.payload.score\n            }\n        case UPDATE_LEVEL:\n            return {\n                ...state,\n                level: action.payload.level\n            }\n        default:\n            return state;\n    }\n}\n\nexport const gameControlsReducer = (state = initialGameControls, action) => {\n    switch (action.type) {\n        case UPDATE_DIRECTION:\n            return loop(\n                {\n                    ...state,\n                    direction: action.direction\n                },\n                Cmd.action({ type: STEP })\n            );\n        default:\n            return state;\n    }\n}\n\nexport const gridCanvasReducer = (state = initialGridCanvas, action) => {\n    switch (action.type) {\n        case SETUP_GRID:\n            return loop(\n                {\n                    ...state,\n                    grid: action.payload.gridInfo.grid,\n                    width: action.payload.gridInfo.width,\n                    height: action.payload.gridInfo.height\n                },\n                Cmd.list([\n                    Cmd.action({ type: SETUP_CELLS_BY_ID, payload: action.payload.cellsById}),\n                    Cmd.action({ type: UPDATE_SNAKE, payload: action.payload.snakeInfo}),\n                    Cmd.action({ type: CREATE_NEW_FOOD })\n                ])\n            );\n        default:\n            return state;\n    }\n}\n\nexport const cellByIdReducer = (state = initialCellById, action) => {\n    switch (action.type) {\n        case SETUP_CELLS_BY_ID:\n            return action.payload;\n        case PLACE_FOOD:\n        case ADD_NEW_HEAD:\n        case UPDATE_CURRENT_HEAD:\n        case REMOVE_CURRENT_TAIL:\n            return {\n                ...state,\n                [action.payload.id]: cellReducer(state[action.payload.id], action)\n            }\n        default:\n            return state;\n    }\n}\n\nexport const cellReducer = (state = initialCell, action) => {\n    switch (action.type) {\n        case PLACE_FOOD:\n        case ADD_NEW_HEAD:\n        case UPDATE_CURRENT_HEAD:\n        case REMOVE_CURRENT_TAIL:\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport const snakeInfoReducer = (state = initialSnakeInfo, action) => {\n    switch (action.type) {\n        case UPDATE_SNAKE:\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}","import { createStore } from 'redux';\nimport { combineReducers } from 'redux-loop';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport { install } from 'redux-loop';\nimport {\n    gameStateReducer,\n    scoreBoardReducer,\n    gridCanvasReducer,\n    cellByIdReducer,\n    snakeInfoReducer,\n    gameControlsReducer\n} from '../containers/game-player/reducer';\n\nconst rootReducer = combineReducers({\n    gameState: gameStateReducer,\n    scoreBoard: scoreBoardReducer,\n    gridCanvas: gridCanvasReducer,\n    cellById: cellByIdReducer,\n    snakeInfo: snakeInfoReducer,\n    gameControls: gameControlsReducer,\n});\n\nconst composeEnhancers = composeWithDevTools({\n    // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\n\n\nconst enhancers = composeEnhancers(\n    install()\n);\n\nconst store = createStore(\n    rootReducer,\n    enhancers\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './config/store';\n\nconst AppWithStore = () => (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nReactDOM.render(<AppWithStore />, document.getElementById('root'));\n"],"sourceRoot":""}